{
	"info": {
		"_postman_id": "ba83efa5-e421-4e22-8d3b-e3e4b7d09c44",
		"name": "REST API Collection",
		"description": "Collection for testing the Node.js, Express, and MongoDB REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Endpoints",
			"item": [
				{
					"name": "User Signup",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:4000/v1/users/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"v1",
								"users",
								"signup"
							]
						},
						"description": "Creates a new user in the system"
					},
					"response": []
				},
				{
					"name": "User Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:4000/v1/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"v1",
								"users",
								"login"
							]
						},
						"description": "Authenticates user and returns JWT token"
					},
					"response": []
				}
			],
			"description": "User authentication and management endpoints"
		},
		{
			"name": "Product Endpoints",
			"item": [
				{
					"name": "Get All Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/v1/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"v1",
								"products"
							]
						},
						"description": "Retrieves all products"
					},
					"response": []
				},
				{
					"name": "Create Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Product\",\n    \"description\": \"This is a test product\",\n    \"price\": 19.99,\n    \"quantity\": 100\n}"
						},
						"url": {
							"raw": "http://localhost:4000/v1/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"v1",
								"products"
							]
						},
						"description": "Creates a new product (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"v1",
								"products",
								"{{product_id}}"
							]
						},
						"description": "Retrieves a specific product by ID"
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": 29.99,\n    \"quantity\": 50\n}"
						},
						"url": {
							"raw": "http://localhost:4000/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"v1",
								"products",
								"{{product_id}}"
							]
						},
						"description": "Updates a product by ID (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/v1/products/{{product_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"v1",
								"products",
								"{{product_id}}"
							]
						},
						"description": "Deletes a product by ID (requires authentication)"
					},
					"response": []
				}
			],
			"description": "Product management endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-capture JWT token from login response",
					"if (pm.response.code === 200 && pm.request.url.toString().includes('/users/login')) {",
					"    var responseJson = pm.response.json();",
					"    if (responseJson.token) {",
					"        pm.environment.set('jwt_token', responseJson.token);",
					"        console.log('JWT token saved to environment variable');",
					"    }",
					"}",
					"",
					"// Auto-capture product ID from create product response",
					"if (pm.response.code === 200 && pm.request.method === 'POST' && pm.request.url.toString().includes('/products')) {",
					"    var responseJson = pm.response.json();",
					"    if (responseJson.product && responseJson.product._id) {",
					"        pm.environment.set('product_id', responseJson.product._id);",
					"        console.log('Product ID saved to environment variable');",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt_token",
			"value": ""
		},
		{
			"key": "product_id",
			"value": ""
		}
	]
} 